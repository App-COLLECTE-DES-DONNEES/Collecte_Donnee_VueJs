{"remainingRequest":"C:\\wamp64\\www\\toolsmctc\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\wamp64\\www\\toolsmctc\\src\\components\\webcam.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\wamp64\\www\\toolsmctc\\src\\components\\webcam.vue","mtime":1614085630461},{"path":"C:\\wamp64\\www\\toolsmctc\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\toolsmctc\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\toolsmctc\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\toolsmctc\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["webcam.vue"],"names":[],"mappingsfile":"webcam.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <video\r\n            ref=\"video\"\r\n            :width=\"width\"\r\n            :height=\"height\"\r\n            :src=\"source\"\r\n            :autoplay=\"autoplay\"\r\n            :playsinline=\"playsinline\"></video>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        name: \"VueWebCam\",\r\n        props: {\r\n            width: {\r\n                type: [Number, String],\r\n                default: \"100%\"\r\n            },\r\n            height: {\r\n                type: [Number, String],\r\n                default: 500\r\n            },\r\n            autoplay: {\r\n                type: Boolean,\r\n                default: true\r\n            },\r\n            screenshotFormat: {\r\n                type: String,\r\n                default: \"image/jpeg\"\r\n            },\r\n            selectFirstDevice: {\r\n                type: Boolean,\r\n                default: false\r\n            },\r\n            deviceId: {\r\n                type: String,\r\n                default: null\r\n            },\r\n            playsinline: {\r\n                type: Boolean,\r\n                default: true\r\n            },\r\n            resolution: {\r\n                type: Object,\r\n                default: null,\r\n                validator: value => {\r\n                    return value.height && value.width;\r\n                }\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                source: null,\r\n                canvas: null,\r\n                camerasListEmitted: false,\r\n                cameras: []\r\n            };\r\n        },\r\n        watch: {\r\n            deviceId: function(id) {\r\n                this.changeCamera(id);\r\n            }\r\n        },\r\n        mounted() {\r\n            this.setupMedia();\r\n        },\r\n        beforeDestroy() {\r\n            this.stop();\r\n        },\r\n        methods: {\r\n            /**\r\n             * get user media\r\n             */\r\n            legacyGetUserMediaSupport() {\r\n                return constraints => {\r\n                    // First get ahold of the legacy getUserMedia, if present\r\n                    let getUserMedia =\r\n                        navigator.getUserMedia ||\r\n                        navigator.webkitGetUserMedia ||\r\n                        navigator.mozGetUserMedia ||\r\n                        navigator.msGetUserMedia ||\r\n                        navigator.oGetUserMedia;\r\n                    // Some browsers just don't implement it - return a rejected promise with an error\r\n                    // to keep a consistent interface\r\n                    if (!getUserMedia) {\r\n                        return Promise.reject(\r\n                            new Error(\"getUserMedia is not implemented in this browser\")\r\n                        );\r\n                    }\r\n                    // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\r\n                    return new Promise(function(resolve, reject) {\r\n                        getUserMedia.call(navigator, constraints, resolve, reject);\r\n                    });\r\n                };\r\n            },\r\n            /**\r\n             * setup media\r\n             */\r\n            setupMedia() {\r\n                if (navigator.mediaDevices === undefined) {\r\n                    navigator.mediaDevices = {};\r\n                }\r\n                if (navigator.mediaDevices.getUserMedia === undefined) {\r\n                    navigator.mediaDevices.getUserMedia = this.legacyGetUserMediaSupport();\r\n                }\r\n                this.testMediaAccess();\r\n            },\r\n            /**\r\n             * load available cameras\r\n             */\r\n            loadCameras() {\r\n                navigator.mediaDevices\r\n                    .enumerateDevices()\r\n                    .then(deviceInfos => {\r\n                        for (let i = 0; i !== deviceInfos.length; ++i) {\r\n                            let deviceInfo = deviceInfos[i];\r\n                            if (deviceInfo.kind === \"videoinput\") {\r\n                                this.cameras.push(deviceInfo);\r\n                            }\r\n                        }\r\n                    })\r\n                    .then(() => {\r\n                        if (!this.camerasListEmitted) {\r\n                            if (this.selectFirstDevice && this.cameras.length > 0) {\r\n                                this.deviceId = this.cameras[0].deviceId;\r\n                            }\r\n                            this.$emit(\"cameras\", this.cameras);\r\n                            this.camerasListEmitted = true;\r\n                        }\r\n                    })\r\n                    .catch(error => this.$emit(\"notsupported\", error));\r\n            },\r\n            /**\r\n             * change to a different camera stream, like front and back camera on phones\r\n             */\r\n            changeCamera(deviceId) {\r\n                this.stop();\r\n                this.$emit(\"camera-change\", deviceId);\r\n                this.loadCamera(deviceId);\r\n            },\r\n            /**\r\n             * load the stream to the\r\n             */\r\n            loadSrcStream(stream) {\r\n                if (\"srcObject\" in this.$refs.video) {\r\n                    // new browsers api\r\n                    this.$refs.video.srcObject = stream;\r\n                } else {\r\n                    // old broswers\r\n                    this.source = window.HTMLMediaElement.srcObject(stream);\r\n                }\r\n                // Emit video start/live event\r\n                this.$refs.video.onloadedmetadata = () => {\r\n                    this.$emit(\"video-live\", stream);\r\n                };\r\n                this.$emit(\"started\", stream);\r\n            },\r\n            /**\r\n             * stop the selected streamed video to change camera\r\n             */\r\n            stopStreamedVideo(videoElem) {\r\n                let stream = videoElem.srcObject;\r\n                let tracks = stream.getTracks();\r\n                tracks.forEach(track => {\r\n                    // stops the video track\r\n                    track.stop();\r\n                    this.$emit(\"stopped\", stream);\r\n                    this.$refs.video.srcObject = null;\r\n                    this.source = null;\r\n                });\r\n            },\r\n            // stop the video\r\n            stop() {\r\n                if (this.$refs.video !== null && this.$refs.video.srcObject) {\r\n                    this.stopStreamedVideo(this.$refs.video);\r\n                }\r\n            },\r\n            // start the video\r\n            start() {\r\n                if (this.deviceId) {\r\n                    this.loadCamera(this.deviceId);\r\n                }\r\n            },\r\n            // pause the video\r\n            pause() {\r\n                if (this.$refs.video !== null && this.$refs.video.srcObject) {\r\n                    this.$refs.video.pause();\r\n                }\r\n            },\r\n            // resume the video\r\n            resume() {\r\n                if (this.$refs.video !== null && this.$refs.video.srcObject) {\r\n                    this.$refs.video.play();\r\n                }\r\n            },\r\n            /**\r\n             * test access\r\n             */\r\n            testMediaAccess() {\r\n                let constraints = { video: true };\r\n                if (this.resolution) {\r\n                    constraints.video = {};\r\n                    constraints.video.height = this.resolution.height;\r\n                    constraints.video.width = this.resolution.width;\r\n                }\r\n                navigator.mediaDevices\r\n                    .getUserMedia(constraints)\r\n                    .then(stream => {\r\n                        //Make sure to stop this MediaStream\r\n                        let tracks = stream.getTracks();\r\n                        tracks.forEach(track => {\r\n                            track.stop();\r\n                        });\r\n                        this.loadCameras();\r\n                    })\r\n                    .catch(error => this.$emit(\"error\", error));\r\n            },\r\n            /**\r\n             * load the camera passed as index!\r\n             */\r\n            loadCamera(device) {\r\n                let constraints = { video: { deviceId: { exact: device } } };\r\n                if (this.resolution) {\r\n                    constraints.video.height = this.resolution.height;\r\n                    constraints.video.width = this.resolution.width;\r\n                }\r\n                navigator.mediaDevices\r\n                    .getUserMedia(constraints)\r\n                    .then(stream => this.loadSrcStream(stream))\r\n                    .catch(error => this.$emit(\"error\", error));\r\n            },\r\n            /**\r\n             * capture screenshot\r\n             */\r\n            capture() {\r\n                return this.getCanvas().toDataURL(this.screenshotFormat);\r\n            },\r\n            /**\r\n             * get canvas\r\n             */\r\n            getCanvas() {\r\n                let video = this.$refs.video;\r\n                if (!this.ctx) {\r\n                    let canvas = document.createElement(\"canvas\");\r\n                    canvas.height = video.videoHeight;\r\n                    canvas.width = video.videoWidth;\r\n                    this.canvas = canvas;\r\n                    this.ctx = canvas.getContext(\"2d\");\r\n                }\r\n                const { ctx, canvas } = this;\r\n                ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n                return canvas;\r\n            }\r\n        }\r\n    };\r\n</script>"]}]}