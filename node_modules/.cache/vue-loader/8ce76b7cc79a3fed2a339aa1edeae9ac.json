{"remainingRequest":"/Users/macbookpro/IdeaProjects/collectedonnee/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macbookpro/IdeaProjects/collectedonnee/src/views/app/accident/addaccident.vue?vue&type=template&id=2be2ebf8&scoped=true&","dependencies":[{"path":"/Users/macbookpro/IdeaProjects/collectedonnee/src/views/app/accident/addaccident.vue","mtime":1660669609491},{"path":"/Users/macbookpro/IdeaProjects/collectedonnee/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/IdeaProjects/collectedonnee/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/macbookpro/IdeaProjects/collectedonnee/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/IdeaProjects/collectedonnee/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}