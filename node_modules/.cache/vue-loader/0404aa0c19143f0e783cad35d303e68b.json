{"remainingRequest":"C:\\Users\\WORLDNEWS\\Desktop\\CATIS COLLECTE\\collectedonnee\\collectedonnee\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\WORLDNEWS\\Desktop\\CATIS COLLECTE\\collectedonnee\\collectedonnee\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\WORLDNEWS\\Desktop\\CATIS COLLECTE\\collectedonnee\\collectedonnee\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\WORLDNEWS\\Desktop\\CATIS COLLECTE\\collectedonnee\\collectedonnee\\src\\containers\\layouts\\largeSidebar\\TopNav.vue?vue&type=template&id=49ee8d72&","dependencies":[{"path":"C:\\Users\\WORLDNEWS\\Desktop\\CATIS COLLECTE\\collectedonnee\\collectedonnee\\src\\containers\\layouts\\largeSidebar\\TopNav.vue","mtime":1659178749000},{"path":"C:\\Users\\WORLDNEWS\\Desktop\\CATIS COLLECTE\\collectedonnee\\collectedonnee\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\WORLDNEWS\\Desktop\\CATIS COLLECTE\\collectedonnee\\collectedonnee\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\WORLDNEWS\\Desktop\\CATIS COLLECTE\\collectedonnee\\collectedonnee\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\WORLDNEWS\\Desktop\\CATIS COLLECTE\\collectedonnee\\collectedonnee\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}