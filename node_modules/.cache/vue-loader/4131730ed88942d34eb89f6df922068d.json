{"remainingRequest":"C:\\wamp64\\www\\toolsmctc\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\wamp64\\www\\toolsmctc\\src\\views\\app\\caisses\\box.vue?vue&type=template&id=c31f0306&scoped=true&xmlns%3Av-slot=http%3A%2F%2Fwww.w3.org%2F1999%2FXSL%2FTransform&","dependencies":[{"path":"C:\\wamp64\\www\\toolsmctc\\src\\views\\app\\caisses\\box.vue","mtime":1604249504291},{"path":"C:\\wamp64\\www\\toolsmctc\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\toolsmctc\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\toolsmctc\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\toolsmctc\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}