{"remainingRequest":"/Users/macbookpro/IdeaProjects/collectedonnee/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macbookpro/IdeaProjects/collectedonnee/src/views/app/accident/detailsaccident.vue?vue&type=template&id=3990a419&scoped=true&","dependencies":[{"path":"/Users/macbookpro/IdeaProjects/collectedonnee/src/views/app/accident/detailsaccident.vue","mtime":1660829010024},{"path":"/Users/macbookpro/IdeaProjects/collectedonnee/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/IdeaProjects/collectedonnee/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/macbookpro/IdeaProjects/collectedonnee/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/IdeaProjects/collectedonnee/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}