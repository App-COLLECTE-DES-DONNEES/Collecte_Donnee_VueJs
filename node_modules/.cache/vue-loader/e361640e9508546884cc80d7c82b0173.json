{"remainingRequest":"/Users/macbookpro/IdeaProjects/collectedonnee/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/macbookpro/IdeaProjects/collectedonnee/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/macbookpro/IdeaProjects/collectedonnee/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macbookpro/IdeaProjects/collectedonnee/src/containers/layouts/largeSidebar/Sidebar.vue?vue&type=template&id=1bf99b28&scoped=true&","dependencies":[{"path":"/Users/macbookpro/IdeaProjects/collectedonnee/src/containers/layouts/largeSidebar/Sidebar.vue","mtime":1658926008000},{"path":"/Users/macbookpro/IdeaProjects/collectedonnee/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/IdeaProjects/collectedonnee/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/macbookpro/IdeaProjects/collectedonnee/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/IdeaProjects/collectedonnee/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7CiAgICAgIHN0YXRpY0NsYXNzOiAic2lkZS1jb250ZW50LXdyYXAiLAogICAgICBvbjogewogICAgICAgIG1vdXNlZW50ZXI6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgX3ZtLmlzTWVudU92ZXIgPSB0cnVlCiAgICAgICAgfSwKICAgICAgICBtb3VzZWxlYXZlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgIF92bS5pc01lbnVPdmVyID0gZmFsc2UKICAgICAgICB9LAogICAgICAgIHRvdWNoc3RhcnQ6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgX3ZtLmlzTWVudU92ZXIgPSB0cnVlCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgWwogICAgICBfYygKICAgICAgICAidnVlLXBlcmZlY3Qtc2Nyb2xsYmFyIiwKICAgICAgICB7CiAgICAgICAgICByZWY6ICJteURhdGEiLAogICAgICAgICAgc3RhdGljQ2xhc3M6ICJzaWRlYmFyLWxlZnQgcnRsLXBzLW5vbmUgcHMgc2Nyb2xsIiwKICAgICAgICAgIGNsYXNzOiB7IG9wZW46IF92bS5nZXRTaWRlQmFyVG9nZ2xlUHJvcGVydGllcy5pc1NpZGVOYXZPcGVuIH0sCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzZXR0aW5nczogeyBzdXBwcmVzc1Njcm9sbFg6IHRydWUsIHdoZWVsUHJvcGFnYXRpb246IGZhbHNlIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJ1bCIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXZpZ2F0aW9uLWxlZnQiLAogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICI5MHB4IWltcG9ydGFudCIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgdGhpcy4kc3RvcmUuc3RhdGUuYXV0aERhdGEucm9sZS5pbmRleE9mKCJjYWlzc2llciIpICE9PSAtMSB8fAogICAgICAgICAgICAgICAgdGhpcy4kc3RvcmUuc3RhdGUuYXV0aERhdGEucm9sZS5pbmRleE9mKCJjaGVmIikgIT09IC0xCiAgICAgICAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAgICAgICAibGkiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hdi1pdGVtIiwKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmU6IF92bS5zZWxlY3RlZFBhcmVudE1lbnUgPT0gImRhc2hib2FyZHMiCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtaXRlbSI6ICJkYXNoYm9hcmRzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGF0YS1zdWJtZW51IjogZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgb246IHsgbW91c2VlbnRlcjogX3ZtLnRvZ2dsZVN1Yk1lbnUgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibmF2LWl0ZW0taG9sZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiIyIgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgdGFnOiAiYSIsIHRvOiAiL2FwcC9ib3giIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXYtaWNvbiBpLUNhc2gtcmVnaXN0ZXItMiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtdGV4dCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uJHQoImNhaXNzZSIpKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidHJpYW5nbGUiIH0pCiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgdGhpcy4kc3RvcmUuc3RhdGUuYXV0aERhdGEucm9sZS5pbmRleE9mKCJjZyIpICE9PSAtMSB8fAogICAgICAgICAgICAgICAgdGhpcy4kc3RvcmUuc3RhdGUuYXV0aERhdGEucm9sZS5pbmRleE9mKCJjaGVmIikgIT09IC0xCiAgICAgICAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAgICAgICAibGkiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hdi1pdGVtIiwKICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmU6IF92bS5zZWxlY3RlZFBhcmVudE1lbnUgPT0gImRhc2hib2FyZHMiCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtaXRlbSI6ICJkYXNoYm9hcmRzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGF0YS1zdWJtZW51IjogZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgb246IHsgbW91c2VlbnRlcjogX3ZtLnRvZ2dsZVN1Yk1lbnUgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibmF2LWl0ZW0taG9sZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiIyIgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgdGFnOiAiYSIsIHRvOiAiL2FwcC9jZyIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hdi1pY29uIGktQ2FzaC1yZWdpc3Rlci0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIm5hdi10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS4kdCgidXBkYXRlY2ciKSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRyaWFuZ2xlIiB9KQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAibGkiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXYtaXRlbSIsCiAgICAgICAgICAgICAgICAgICAgY2xhc3M6IHsgYWN0aXZlOiBfdm0uc2VsZWN0ZWRQYXJlbnRNZW51ID09ICJjcm0iIH0sCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtaXRlbSI6ICJjcm0iLCAiZGF0YS1zdWJtZW51IjogdHJ1ZSB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7IG1vdXNlZW50ZXI6IF92bS50b2dnbGVTdWJNZW51IH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm5hdi1pdGVtLWhvbGQiLCBhdHRyczogeyBocmVmOiAiIyIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtaWNvbiBpLUhvc3BpdGFsIiB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAibmF2LXRleHQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoImhvc3BpdGFsIikKICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidHJpYW5nbGUiIH0pCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApLAogICAgICBfYygKICAgICAgICAidnVlLXBlcmZlY3Qtc2Nyb2xsYmFyIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInNpZGViYXItbGVmdC1zZWNvbmRhcnkgcHMgcnRsLXBzLW5vbmUiLAogICAgICAgICAgY2xhc3M6IHsKICAgICAgICAgICAgb3BlbjogX3ZtLmdldFNpZGVCYXJUb2dnbGVQcm9wZXJ0aWVzLmlzU2Vjb25kYXJ5U2lkZU5hdk9wZW4KICAgICAgICAgIH0sCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzZXR0aW5nczogeyBzdXBwcmVzc1Njcm9sbFg6IHRydWUsIHdoZWVsUHJvcGFnYXRpb246IGZhbHNlIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHJlZjogInNpZGViYXJDaGlsZCIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAidWwiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2hpbGROYXYgZC1ub25lIiwKICAgICAgICAgICAgICAgIGNsYXNzOiB7ICJkLWJsb2NrIjogX3ZtLnNlbGVjdGVkUGFyZW50TWVudSA9PSAiY3JtIiB9LAogICAgICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtcGFyZW50IjogImNybSIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJsaSIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJuYXYtaXRlbSIgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJyb3V0ZXItbGluayIsIHsgYXR0cnM6IHsgdG86IHsgbmFtZTogImhvc3BpdGFsIiB9IH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm5hdi1pdGVtLWhvbGQiLCBhdHRyczogeyBocmVmOiAiIyIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAibmF2LWljb24gaS1Mb2NrLVVzZXIiIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIm5hdi10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS4kdCgicGF0aWVudHMiKSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImxpIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm5hdi1pdGVtIiB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInJvdXRlci1saW5rIiwgeyBhdHRyczogeyB0bzogeyBuYW1lOiAic29pbnMiIH0gfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibmF2LWl0ZW0taG9sZCIsIGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtaWNvbiBpLWNhcmUiIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIm5hdi10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS4kdCgic29pbnMiKSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImxpIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm5hdi1pdGVtIiB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInJvdXRlci1saW5rIiwgeyBhdHRyczogeyB0bzogeyBuYW1lOiAiZXhhbXMiIH0gfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibmF2LWl0ZW0taG9sZCIsIGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtaWNvbiBpLUJpbGxpbmciIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogIm5hdi10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS4kdCgiZXhhbXMiKSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImxpIiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm5hdi1pdGVtIiB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyB0bzogeyBuYW1lOiAidHJhdW1hdGlzbWUiIH0gfSB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXYtaXRlbS1ob2xkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtaWNvbiBpLUJpbGxpbmciIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAibmF2LXRleHQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uJHQoInRyYXVtYXRpc21lIikpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApLAogICAgICBfYygiZGl2IiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAic2lkZWJhci1vdmVybGF5IiwKICAgICAgICBjbGFzczogeyBvcGVuOiBfdm0uZ2V0U2lkZUJhclRvZ2dsZVByb3BlcnRpZXMuaXNTZWNvbmRhcnlTaWRlTmF2T3BlbiB9LAogICAgICAgIG9uOiB7CiAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgIHJldHVybiBfdm0ucmVtb3ZlT3ZlcmxheSgpCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KQogICAgXSwKICAgIDEKICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}