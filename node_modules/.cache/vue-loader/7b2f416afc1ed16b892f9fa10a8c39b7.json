{"remainingRequest":"C:\\Users\\WORLDNEWS\\Desktop\\CATIS TOUS LES PROJETS FRONTEND\\collectedonnee\\collectedonnee\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\WORLDNEWS\\Desktop\\CATIS TOUS LES PROJETS FRONTEND\\collectedonnee\\collectedonnee\\src\\views\\app\\accident\\detailsaccident.vue?vue&type=template&id=3990a419&scoped=true&","dependencies":[{"path":"C:\\Users\\WORLDNEWS\\Desktop\\CATIS TOUS LES PROJETS FRONTEND\\collectedonnee\\collectedonnee\\src\\views\\app\\accident\\detailsaccident.vue","mtime":1661247124000},{"path":"C:\\Users\\WORLDNEWS\\Desktop\\CATIS TOUS LES PROJETS FRONTEND\\collectedonnee\\collectedonnee\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\WORLDNEWS\\Desktop\\CATIS TOUS LES PROJETS FRONTEND\\collectedonnee\\collectedonnee\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\WORLDNEWS\\Desktop\\CATIS TOUS LES PROJETS FRONTEND\\collectedonnee\\collectedonnee\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\WORLDNEWS\\Desktop\\CATIS TOUS LES PROJETS FRONTEND\\collectedonnee\\collectedonnee\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}